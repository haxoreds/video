import os
import asyncio
import logging
from typing import List
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from config import BOT_TOKEN, TEMP_DIR, MAX_VIDEO_SIZE, ARCHIVE_DIR
from download_manager import DownloadManager
from video_processor import VideoProcessor
from utils import create_temp_dir, cleanup_temp_files, split_list
import shutil

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.DEBUG
)
logger = logging.getLogger(__name__)

SUPPORTED_VIDEO_FORMATS = ('.mp4', '.avi', '.mkv', '.mov')

def ensure_directories():
    """Create necessary directories if they don't exist."""
    os.makedirs(TEMP_DIR, mode=0o755, exist_ok=True)
    os.makedirs(ARCHIVE_DIR, mode=0o755, exist_ok=True)
    logger.info(f"Created temporary directories: {TEMP_DIR}, {ARCHIVE_DIR}")

class SceneDetectionBot:
    def __init__(self):
        self.application = Application.builder().token(BOT_TOKEN).build()
        ensure_directories()
        self._cleanup_on_start()  # Add cleanup on start
        self._setup_handlers()

    def _cleanup_on_start(self):
        """Clean up temporary directories on bot start."""
        try:
            logger.info("Cleaning up temporary directories on start...")
            cleanup_temp_files(TEMP_DIR)
            cleanup_temp_files(ARCHIVE_DIR)
            logger.info("Temporary directories cleaned successfully")
        except Exception as e:
            logger.error(f"Error cleaning temporary directories on start: {str(e)}")

    def _setup_handlers(self):
        """Set up message handlers."""
        # Handle YouTube links first
        self.application.add_handler(MessageHandler(
            filters.TEXT & ~filters.COMMAND,
            self.handle_youtube_link
        ))

        # Then handle video files
        self.application.add_handler(MessageHandler(
            (filters.VIDEO | filters.Document.ALL) & ~filters.COMMAND,
            self.handle_video
        ))

        # Basic commands
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))

        # Add callback query handler for buttons
        self.application.add_handler(CallbackQueryHandler(self.button_click))

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /start command."""
        try:
            # Clean up temporary directories
            logger.info("Cleaning up temporary directories on /start command...")
            cleanup_temp_files(TEMP_DIR)
            cleanup_temp_files(ARCHIVE_DIR)
            logger.info("Temporary directories cleaned successfully")
        except Exception as e:
            logger.error(f"Error cleaning temporary directories: {str(e)}")

        welcome_text = (
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Å—Ü–µ–Ω –≤ –≤–∏–¥–µ–æ!\n\n"
            "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Ä–∞–∑–¥–µ–ª–∏—Ç—å –≤–∏–¥–µ–æ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å—Ü–µ–Ω—ã. –í—ã –º–æ–∂–µ—Ç–µ:\n"
            "1. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube\n"
            "2. –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ—Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
        )
        await update.message.reply_text(welcome_text)

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /help command."""
        help_text = (
            "üé• –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞:\n\n"
            "1. –î–ª—è –≤–∏–¥–µ–æ —Å YouTube:\n"
            "   - –ü—Ä–æ—Å—Ç–æ –≤—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube\n"
            "   - –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è: –≤ Telegram –∏–ª–∏ –∞—Ä—Ö–∏–≤–æ–º\n\n"
            "2. –î–ª—è –≤–∞—à–∏—Ö –≤–∏–¥–µ–æ:\n"
            "   - –ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é\n"
            "   - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: MP4, AVI, MKV, MOV\n"
            "   - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 50–ú–ë\n\n"
            "–ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ:\n"
            "‚úÖ –ü–æ–ª—É—á–∏—Ç—å —Å—Ü–µ–Ω—ã –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –≤–∏–¥–µ–æ –≤ Telegram\n"
            "‚úÖ –°–∫–∞—á–∞—Ç—å –≤—Å–µ —Å—Ü–µ–Ω—ã –æ–¥–Ω–∏–º –∞—Ä—Ö–∏–≤–æ–º\n\n"
            "–Ø –æ–±—Ä–∞–±–æ—Ç–∞—é –≤–∏–¥–µ–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—é –≤–∞–º —Å—Ü–µ–Ω—ã –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º!"
        )
        await update.message.reply_text(help_text)

    async def button_click(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle button clicks."""
        query = update.callback_query
        await query.answer()  # Acknowledge the button click

        # Get data from callback_data
        data = query.data.split('|')
        action = data[0]
        temp_dir = data[1]

        if action == "telegram":
            # Process and send scenes via Telegram
            await self.send_scenes_telegram(query.message, temp_dir)
        elif action == "archive":
            # Create and send RAR archive
            await self.send_scenes_archive(query.message, temp_dir)

    async def handle_youtube_link(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle YouTube link messages."""
        message = update.message
        text = message.text.strip()

        logger.debug(f"Processing potential YouTube link: {text}")

        youtube_patterns = [
            'youtube.com/watch?v=',
            'youtu.be/',
            'm.youtube.com/watch?v=',
            'youtube.com/v/',
            'youtube.com/embed/'
        ]

        if not any(pattern in text for pattern in youtube_patterns):
            logger.debug("Message is not a YouTube link")
            await message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ.\n–ü—Ä–∏–º–µ—Ä: https://youtube.com/watch?v=...")
            return

        status_message = await message.reply_text("‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ —Å YouTube... 0%")

        # Clean up temp directories before starting
        try:
            logger.info("Cleaning up temporary directories before YouTube download...")
            cleanup_temp_files(TEMP_DIR)
            cleanup_temp_files(ARCHIVE_DIR)
            logger.info("Temporary directories cleaned successfully")
        except Exception as e:
            logger.error(f"Error cleaning temporary directories: {str(e)}")

        temp_dir = create_temp_dir()
        logger.info(f"Created temporary directory for YouTube download: {temp_dir}")

        try:
            success, result = await DownloadManager.download_from_youtube(text, temp_dir)

            if not success:
                error_msg = result
                logger.error(f"YouTube download failed: {error_msg}")
                cleanup_temp_files(temp_dir)
                await status_message.edit_text(f"‚ùå {error_msg}")
                return

            logger.info(f"Successfully downloaded YouTube video to: {result}")
            await self.process_video_and_show_options(result, status_message, temp_dir)

        except Exception as e:
            logger.exception("Error processing YouTube link")
            error_msg = str(e)
            await status_message.edit_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {error_msg}")
            cleanup_temp_files(temp_dir)

    async def handle_video(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle video file uploads."""
        message = update.message

        logger.debug(f"Received message type: video={bool(message.video)}, document={bool(message.document)}")

        if not (message.video or message.document):
            logger.warning("Message contains neither video nor document")
            return

        # Check file format for documents
        if message.document:
            file_name = message.document.file_name.lower()
            if not any(file_name.endswith(ext) for ext in SUPPORTED_VIDEO_FORMATS):
                await message.reply_text(
                    f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {', '.join(SUPPORTED_VIDEO_FORMATS)}"
                )
                return

        status_message = await message.reply_text("‚è≥ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞... 0%")
        temp_dir = create_temp_dir()
        logger.info(f"Created temporary directory for video: {temp_dir}")

        try:
            # Get file_id from either video or document
            file_id = message.video.file_id if message.video else message.document.file_id
            logger.info(f"Processing file with ID: {file_id}")

            file = await context.bot.get_file(file_id)
            logger.debug(f"Retrieved file object: {file}")

            # Check file size
            if file.file_size > MAX_VIDEO_SIZE:
                await status_message.edit_text(
                    f"‚ùå –í–∏–¥–µ–æ—Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {MAX_VIDEO_SIZE/(1024*1024):.1f}–ú–ë"
                )
                cleanup_temp_files(temp_dir)
                return

            async def progress(current, total):
                percent = int(current * 100 / total)
                await status_message.edit_text(f"‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞... {percent}%")

            success, result = await DownloadManager.save_telegram_video(file, temp_dir, progress)
            if not success:
                logger.error(f"Failed to save video: {result}")
                await status_message.edit_text(f"‚ùå {result}")
                cleanup_temp_files(temp_dir)
                return

            logger.info(f"Successfully saved video to: {result}")
            await self.process_video_and_show_options(result, status_message, temp_dir)

        except Exception as e:
            logger.exception("Error processing video file")
            error_msg = str(e)
            if "file is too big" in error_msg.lower():
                await status_message.edit_text(
                    f"‚ùå –í–∏–¥–µ–æ—Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {MAX_VIDEO_SIZE/(1024*1024):.1f}–ú–ë"
                )
            else:
                await status_message.edit_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {error_msg}")
            cleanup_temp_files(temp_dir)

    async def process_video_and_show_options(self, video_path: str, status_message, temp_dir: str):
        """Process video and show delivery options."""
        try:
            logger.info(f"Starting video processing for: {video_path}")

            is_valid, error = VideoProcessor.validate_video(video_path)
            if not is_valid:
                logger.error(f"Video validation failed: {error}")
                await status_message.edit_text(f"‚ùå {error}")
                cleanup_temp_files(temp_dir)  # Clean up on validation error
                return

            await status_message.edit_text("üé¨ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å—Ü–µ–Ω... 0%")

            try:
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –≤ 10 –º–∏–Ω—É—Ç –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ
                async with asyncio.timeout(600):  # 10 –º–∏–Ω—É—Ç
                    success, scenes = await VideoProcessor.detect_and_split_scenes(
                        video_path,
                        temp_dir,
                        lambda progress: status_message.edit_text(f"üé¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ... {progress}%")
                    )

                    if not success:
                        logger.error(f"Scene detection failed: {scenes[0]}")
                        await status_message.edit_text(f"‚ùå {scenes[0]}")
                        cleanup_temp_files(temp_dir)  # Clean up on detection failure
                        return

                    logger.info(f"Successfully split video into {len(scenes)} scenes")

                    # Create inline keyboard with two buttons
                    keyboard = [
                        [
                            InlineKeyboardButton("üì§ –ü–æ–ª—É—á–∏—Ç—å –≤ Telegram", callback_data=f"telegram|{temp_dir}"),
                            InlineKeyboardButton("üì¶ –°–∫–∞—á–∞—Ç—å –∞—Ä—Ö–∏–≤–æ–º", callback_data=f"archive|{temp_dir}")
                        ]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)

                    await status_message.edit_text(
                        f"‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–æ –Ω–∞ {len(scenes)} —Å—Ü–µ–Ω!\n"
                        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è:",
                        reply_markup=reply_markup
                    )

            except asyncio.TimeoutError:
                logger.error("Video processing timed out")
                await status_message.edit_text(
                    "‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–∏–¥–µ–æ –º–µ–Ω—å—à–µ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ "
                    "–∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
                )
                cleanup_temp_files(temp_dir)  # Clean up on timeout
                return

        except Exception as e:
            logger.exception("Error in video processing")
            await status_message.edit_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {str(e)}")
            cleanup_temp_files(temp_dir)  # Clean up on any other error

    async def send_scenes_telegram(self, message, temp_dir: str):
        """Send scenes via Telegram."""
        try:
            # Get all scene files and sort them numerically
            scenes = [f for f in os.listdir(temp_dir) if f.endswith('.mp4')]
            scenes.sort(key=lambda x: int(x.split('-')[1].split('.')[0]))
            scene_paths = [os.path.join(temp_dir, scene) for scene in scenes]

            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ü–µ–Ω –≤ –ø–æ—Ä—è–¥–∫–µ: {', '.join(scenes)}")

            await message.edit_text(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ {len(scenes)} —Å—Ü–µ–Ω... 0%")

            # Process scenes sequentially
            total_scenes = len(scenes)
            scenes_sent = 0

            # Send scenes one by one to maintain order
            for scene_path in scene_paths:
                try:
                    with open(scene_path, 'rb') as video:
                        scene_number = int(os.path.basename(scene_path).split('-')[1].split('.')[0])
                        await self.application.bot.send_video(
                            chat_id=message.chat_id,
                            video=video,
                            caption=f"–°—Ü–µ–Ω–∞ {scene_number}",
                            supports_streaming=True
                        )
                        scenes_sent += 1
                        progress = int(scenes_sent * 100 / total_scenes)
                        if progress % 10 == 0:  # Update progress every 10%
                            await message.edit_text(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ü–µ–Ω... {progress}%")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ü–µ–Ω—ã {scene_path}: {str(e)}")
                    await message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ü–µ–Ω—É {os.path.basename(scene_path)}: {str(e)}")

            await message.edit_text("‚úÖ –í—Å–µ —Å—Ü–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")
        except Exception as e:
            await message.edit_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ü–µ–Ω: {str(e)}")
        finally:
            # Cleanup all temporary files
            try:
                cleanup_temp_files(temp_dir)
            except Exception as cleanup_error:
                logger.error(f"Error during cleanup: {str(cleanup_error)}")

    async def send_scenes_archive(self, message, temp_dir: str):
        """Create and send 7z archive with scenes."""
        try:
            # Check if 7zip is available
            if not await self.check_7zip_available():
                logger.error("7zip is not available in the system")
                await message.edit_text("‚ùå –û—à–∏–±–∫–∞: –∞—Ä—Ö–∏–≤–∞—Ç–æ—Ä 7zip –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
                return

            # Get all scene files
            scenes = [f for f in os.listdir(temp_dir) if f.endswith('.mp4')]
            if not scenes:
                logger.warning("No scenes found for archiving")
                await message.edit_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Å—Ü–µ–Ω—ã –¥–ª—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏")
                return

            await message.edit_text("üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ —Å–æ —Å—Ü–µ–Ω–∞–º–∏...")

            # Clean up archive directory before starting
            try:
                logger.info("Cleaning up archive directory before creating new archive...")
                cleanup_temp_files(ARCHIVE_DIR)
                logger.info("Archive directory cleaned successfully")
            except Exception as e:
                logger.error(f"Error cleaning archive directory: {str(e)}")
                await message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∞—Ä—Ö–∏–≤–∞")
                return

            # Create archive name and path
            archive_name = "scenes.7z"
            archive_path = os.path.join(ARCHIVE_DIR, archive_name)

            # Ensure archive directory exists
            os.makedirs(os.path.dirname(archive_path), exist_ok=True)

            # Create simple archive command
            scene_paths = ' '.join([os.path.join(temp_dir, scene) for scene in scenes])
            seven_zip_command = f"7z a {archive_path} {scene_paths}"

            logger.info(f"Running 7zip command: {seven_zip_command}")

            process = await asyncio.create_subprocess_shell(
                seven_zip_command,
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )

            try:
                # Wait for the process with timeout
                stdout, stderr = await asyncio.wait_for(process.communicate(), timeout=600)  # 10 minutes timeout

                if stdout:
                    logger.info(f"7zip stdout: {stdout.decode()}")
                if stderr:
                    logger.error(f"7zip stderr: {stderr.decode()}")

                if process.returncode != 0:
                    error_msg = stderr.decode() if stderr else "Unknown error"
                    logger.error(f"7zip process failed with return code {process.returncode}: {error_msg}")
                    await message.edit_text(
                        f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å "
                        "–æ–ø—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ü–µ–Ω –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏."
                    )
                    return

                if os.path.exists(archive_path):
                    archive_size = os.path.getsize(archive_path)
                    logger.info(f"Archive created successfully. Size: {archive_size/(1024*1024):.1f}MB")

                    try:
                        with open(archive_path, 'rb') as archive:
                            await message.reply_document(
                                document=archive,
                                filename=archive_name,
                                caption=f"üì¶ –ê—Ä—Ö–∏–≤ —Å–æ —Å—Ü–µ–Ω–∞–º–∏ - {len(scenes)} —Å—Ü–µ–Ω"
                            )
                        await message.edit_text("‚úÖ –ê—Ä—Ö–∏–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
                        logger.info("Archive sent successfully")
                    except Exception as send_error:
                        logger.error(f"Error sending archive: {str(send_error)}")
                        await message.edit_text(
                            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞—Ä—Ö–∏–≤–∞.\n"
                            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–ø—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ü–µ–Ω –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏."
                        )
                else:
                    logger.error(f"Archive not found at path: {archive_path}")
                    await message.edit_text("‚ùå –ê—Ä—Ö–∏–≤ –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω")

            except asyncio.TimeoutError:
                logger.error("7zip process timed out")
                if process.returncode is None:
                    process.kill()
                await message.edit_text(
                    "‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞. "
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∞—Ä—Ö–∏–≤ —Å –º–µ–Ω—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å—Ü–µ–Ω."
                )

        except Exception as e:
            logger.exception(f"Error creating archive: {str(e)}")
            await message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞: {str(e)}")
        finally:
            # Cleanup all temporary files
            try:
                cleanup_temp_files(temp_dir)
                if os.path.exists(archive_path):
                    os.unlink(archive_path)
                    logger.debug(f"Cleaned up archive file: {archive_path}")
            except Exception as cleanup_error:
                logger.error(f"Error during cleanup: {str(cleanup_error)}")

    async def check_7zip_available(self):
        """Check if 7zip is available in the system."""
        try:
            process = await asyncio.create_subprocess_shell(
                "7z i",
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            stdout, stderr = await process.communicate()
            logger.info(f"7zip version check result: {stdout.decode() if stdout else ''}")
            return process.returncode == 0
        except Exception as e:
            logger.error(f"Error checking 7zip availability: {str(e)}")
            return False

    async def send_scene_chunk(self, chat_id: int, scene_paths: List[str]):
        """Send a chunk of scene videos."""
        for scene_path in scene_paths:
            try:
                with open(scene_path, 'rb') as video:
                    scene_number = int(os.path.basename(scene_path).split('-')[1].split('.')[0])
                    await self.application.bot.send_video(
                        chat_id=chat_id,
                        video=video,
                        caption=f"–°—Ü–µ–Ω–∞ {scene_number}",
                        supports_streaming=True
                    )
            except Exception as e:
                await self.application.bot.send_message(
                    chat_id=chat_id,
                    text=f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ü–µ–Ω—É {os.path.basename(scene_path)}: {str(e)}"
                )

    def run(self):
        """Run the bot."""
        self.application.run_polling()

if __name__ == "__main__":
    bot = SceneDetectionBot()
    bot.run()